Brand
Material UI Configurator
See our dashboard options.

Sidenav Colors
Sidenav Type
Choose between different sidenav types.
Navbar Fixed
Light / Dark
Thank you for sharing!
Brand
Java Full Stack
46%

Server-side Programming:Java Servlets
Server-side Programming:Java Servlets
Servlet is a technology i.e. used to create web application. Servlet is an API that provides many interfaces and classes including documentations. Servlet is an interface that must be implemented for creating any servlet. Servlet is a class that extends the capabilities of the servers and responds to the incoming requests. It can respond to any type of requests. Servlet is a web component that is deployed on the server to create dynamic web page.

Next Step


Next Step
CGI(Commmon Gateway Interface)
• CGI technology enables the web server to call an external program and pass HTTP request information to the external program to process the request.



• For each request, it starts a new process.



CGI(Commmon Gateway Interface)
Disadvantages of CGI
There are many problems in CGI technology:

• If number of clients increases, it takes more time for sending response.

• For each request, it starts a process and Web server is limited to start processes.

• It uses platform dependent language e.g. C, C++, perl.



Advantage of Servlet
• The web container creates threads for handling the multiple requests to the servlet.



• Threads have a lot of benefits over the Processes such as they share a common memory area, lightweight, cost of communication between the threads are low. 



Advantage of Servlet
Next Step
The basic benefits of servlet are as follows:

• Better performance: because it creates a thread for each request not process.



• Portability: because it uses java language.



• Robust: Servlets are managed by JVM so we don't need to worry about memory leak, garbage collection etc.



• Secure: because it uses java language



Benefits of servlet
• Portability

• Powerful

• Efficiency

• Safety

• Integration

• Extensibility

• Inexpensive

• Secure

• Performance

Java Servlet
Javax.servlet package can be extended for use with any application layer protocol

• http is the most popularly used protocol

• Javax.servlet.http package is extension of the javax.servlet package for http protocol



• The Servlet spec allows you to implement separate Java methods implementing each HTTP method in your subclass of HttpServlet.

• Override the doGet() and/or doPost() method to provide normal servlet functionality.

• Override doPut() or doDelete() if you want to implement these methods.

• There's no need to override doOptions() or doTrace().

• The superclass handles the HEAD method all on its own

Anatomy of a Servlet
• init()

• destroy()

• service()

• doGet()

• doPost() 

Next Step
• Servlet API life cycle methods

• init(): called when servlet is instantiated; must return before any other methods will be called



• service(): method called directly by server when an HTTP request is received; default service() method calls doGet() (or related methods covered later)



• destroy(): called when server shuts down



Next Step
Anatomy of a Servlet
HTTPServletRequest object

• Information about an HTTP request

• Headers

• Query String

• Session

• Cookies



HTTPServletResponse object

• Used for formatting an HTTP response

• Headers

• Status codes

• Cookies 

Server-side Programming
• The combination of

• HTML

• JavaScript

• DOM

is sometimes referred to as Dynamic HTML (DHTML)

• Web pages that include scripting are often called dynamic pages (vs. static)

Server-side Programming
• Similarly, web server response can be static or dynamic

• Static: HTML document is retrieved from the file system and returned to the client

• Dynamic: HTML document is generated by a program in response to an HTTP request



• Java servlets are one technology for producing dynamic server responses

• Servlet is a class instantiated by the server to produce a dynamic response





Servlet Overview


Servlet Overview
Servlet OverviewReading Data from a Client
1.When server starts it instantiates servlets

2.Server receives HTTP request, determines need for dynamic response

3.Server selects the appropriate servlet to generate the response, creates request/response objects, and passes them to a method on the servlet instance

4.Servlet adds information to response object via method calls

5.Server generates HTTP response based on information stored in response object 





• The browser uses two methods to pass this information to web server. These methods are GET Method and POST Method.



• GET Method (doGet())



• The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ?(question mark) symbol as follows ?

 http://www.test.com/hello?key1 = value1&key2 = value2



POST Method

• A generally more reliable method of passing information to a backend program is the POST method.

• This packages the information in exactly the same way as GET method, but instead of sending it as a text string after a ? (question mark) in the URL it sends it as a separate message.

• This message comes to the backend program in the form of the standard input which you can parse and use for your processing.

 Servlet handles this type of requests using doPost() method.



• Servlets handles form data parsing automatically using the following methods depending on the situation ?



• getParameter() ? You call request.getParameter() method to get the value of a form parameter.



• getParameterValues() ? Call this method if the parameter appears more than once and returns multiple values, for example checkbox.



• getParameterNames() ? Call this method if you want a complete list of all parameters in the current request.



?





Example


Example
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Next Step


Next Step
Servlets vs. Java Applications
• Servlets do not have a main()

• The main() is in the server

• Entry point to servlet code is via call to a method (doGet() in the example)

• Servlet interaction with end user is indirect via request/response object APIs

• Actual HTTP request/response processing is handled by the server

• Primary servlet output is typically HTML

Servlet Life Cycle
• Servlet API life cycle methods

• init(): called when servlet is instantiated; must return before any other methods will be called.

• service(): method called directly by server when an HTTP request is received; default service() method calls doGet() (or related methods covered later).

• destroy(): called when server shuts down.

Servlet Life Cycle
Next Step


Next Step
Next Step


Next Step
Reading HTTP Request Headers https://www.tutorialspoint.com/servlets/servlets-client-request.htm
• When a browser requests for a web page, it sends lot of information to the web server which cannot be read directly because this information travel as a part of header of HTTP request. You can check HTTP Protocol for more information on this.



• Following is the important header information which comes from browser side and you would use very frequently in web programming ?





Accept

• This header specifies the MIME types that the browser or other clients can handle. Values of image/png or image/jpeg are the two most common possibilities.

Accept-Charset



• This header specifies the character sets the browser can use to display the information. For example ISO-8859-1.

 

Accept-Encoding

• This header specifies the types of encodings that the browser knows how to handle. Values of gzip or compress are the two most common possibilities.





Accept-Language

• This header specifies the client's preferred languages in case the servlet can produce results in more than one language. For example en, en-us, ru, etc

• Authorization

This header is used by clients to identify themselves when accessing password-protected Web pages



Connection

• This header indicates whether the client can handle persistent HTTP connections. Persistent connections permit the client or other browser to retrieve multiple files with a single request. A value of Keep-Alive means that persistent connections should be used.



Content-Length

• This header is applicable only to POST requests and gives the size of the POST data in bytes.



Cookie

• This header returns cookies to servers that previously sent them to the browser.



Host

• This header specifies the host and port as given in the original URL.

If-Modified-Since

• This header indicates that the client wants the page only if it has been changed after the specified date. The server sends a code, 304 which means Not Modified header if no newer result is available.



If-Unmodified-Since

• This header is the reverse of If-Modified-Since; it specifies that the operation should succeed only if the document is older than the specified date.

 

Referer

• This header indicates the URL of the referring Web page. For example, if you are at Web page 1 and click on a link to Web page 2, the URL of Web page 1 is included in the Referrer header when the browser requests Web page 2.

User-Agent

This header identifies the browser or other client making the request and can be used to return different content to different types of browsers.?







Methods
• Cookie[] getCookies() 

• Enumeration getAttributeNames()

• Enumeration getHeaderNames() 

• Enumeration getParameterNames()

• HttpSession getSession()

• HttpSession getSession(boolean create)

• Locale getLocale() 

• Object getAttribute(String name) 

• ServletInputStream getInputStream() 

• String getAuthType()

• String getCharacterEncoding()

• String getContentType()

• String getContextPath()

• String getHeader(String name)

• String getMethod()

• String getParameter(String name)

Writing HTTP Response Header
when a Web server responds to an HTTP request, the response typically consists of a status line, some response headers, a blank line, and the document. A typical response looks like this ?



1. Allow

This header specifies the request methods (GET, POST, etc.) that the server supports.


Cache-Control

This header specifies the circumstances in which the response document can safely be cached. It can have values public, privateor no-cache etc. Public means document is cacheable, Private means document is for a single user and can only be stored in private (non-shared) caches and no cache means document should never be cached.


Connection

This header instructs the browser whether to use persistent in HTTP connections or not. A value of close instructs the browser not to use persistent HTTP connections and keepalive means using persistent connections.



Content-Disposition

This header lets you request that the browser ask the user to save the response to disk in a file of the given name.

Content-Encoding

This header specifies the way in which the page was encoded during transmission.

Content-Language

This header signifies the language in which the document is written. For example en, en-us, ru, etc



Content-Length

This header indicates the number of bytes in the response. This information is needed only if the browser is using a persistent (keep-alive) HTTP connection.


Content-Type

This header gives the MIME (Multipurpose Internet Mail Extension) type of the response document.


Expires

This header specifies the time at which the content should be considered out-of-date and thus no longer be cached.


Last-Modified

This header indicates when the document was last changed. The client can then cache the document and supply a date by an If-Modified-Since request header in later requests.


Location

This header should be included with all responses that have a status code in the 300s. This notifies the browser of the document address. The browser automatically reconnects to this location and retrieves the new document.


Refresh

This header specifies how soon the browser should ask for an updated page. You can specify time in number of seconds after which a page would be refreshed.


Retry-After

This header can be used in conjunction with a 503 (Service Unavailable) response to tell the client how soon it can repeat its request.


Set-Cookie

This header specifies a cookie associated with the page.






Methods to Set HTTP Response Header
• There are following methods which can be used to set HTTP response header in your servlet program. These methods are available with HttpServletResponse object.



Methods to Set HTTP Response Header
Sessions
• Many interactive Web sites spread user data entry out over several pages:

• Ex: add items to cart, enter shipping information, enter billing information

• Problem: how does the server know which users generated which HTTP requests?

• Cannot rely on standard HTTP headers to identify a user

Sessions


Sessions
Next Sessions


Next Sessions
Next Sessions


Next Sessions
Next Sessions


Next Sessions
Next Sessions


Next Sessions
Next Sessions


Next Sessions
Next Sessions


Next Sessions
Next Sessions


Next Sessions
Sessions


Sessions
Next Sessions


Next Sessions
Next Sessions


Next Sessions
Next Sessions


Next Sessions
Next Sessions


Next Sessions
Sessions


Sessions
Sessions


Sessions
Sessions


Sessions
Sessions


Sessions
Sessions


Sessions
Sessions


Sessions
Sessions


Sessions
Sessions
a

Sessions
Sessions


Sessions
Sessions


Sessions
Sessions


Sessions
Sessions


Sessions
Sessions


Sessions
Sessions


Sessions
Sessions
• Session attribute methods:

• setAttribute(String name, Object value): creates a session attribute with the given name and value

• Object getAttribute(String name): returns the value of the session attribute named name, or returns null if this session does not have an attribute with this name.

Sessions


Sessions
Sessions
• By default, each session expires if a server-determined length of time elapses between a session’s HTTP requests

• Server destroys the corresponding session object

• Servlet code can:

• Terminate a session by calling invalidate() method on session object

• Set the expiration time-out duration (secs) by calling setMaxInactiveInterval(int).

Cookies
• A cookie is a name/value pair in the Set-Cookie header field of an HTTP response

• Most (not all) clients will:

• Store each cookie received in its file system

• Send each cookie back to the server that sent it as part of the Cookie header field of subsequent HTTP requests.

Cookies


Cookies
Cookies


Cookies
Cookies
• Servlets can set cookies explicitly

• Cookie class used to represent cookies

• request.getCookies() returns an array of Cookie instances representing cookie data in HTTP request

• response.addCookie(Cookie) adds a cookie to the HTTP response.

Cookies


Cookies
Cookies


Cookies
Cookies


Cookies
Cookies


Cookies
Cookies


Cookies
Cookies


Cookies
Cookies


Cookies
Cookies Privacy issues


Cookies Privacy issues
Cookies Privacy issues


Cookies Privacy issues
